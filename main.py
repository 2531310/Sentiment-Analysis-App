import streamlit as st
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import torch.nn.functional as F
import pandas as pd
import langid
import plotly.express as px

# ==============================
# ‚öôÔ∏è T·∫£i model & tokenizer
# ==============================
@st.cache_resource
def load_model_and_tokenizer(model_name="tabularisai/multilingual-sentiment-analysis"):
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    return tokenizer, model

tokenizer, model = load_model_and_tokenizer()

# ==============================
# üè∑Ô∏è B·∫£n ƒë·ªì nh√£n c·∫£m x√∫c (Ti·∫øng Vi·ªát)
# ==============================
sentiment_map = {
    0: "R·∫•t ti√™u c·ª±c",
    1: "Ti√™u c·ª±c",
    2: "Trung l·∫≠p",
    3: "T√≠ch c·ª±c",
    4: "R·∫•t t√≠ch c·ª±c"
}

# ==============================
# üé® C·∫•u h√¨nh giao di·ªán Streamlit
# ==============================
st.set_page_config(page_title="Ph√¢n t√≠ch c·∫£m x√∫c ƒëa ng√¥n ng·ªØ", page_icon="üí¨", layout="centered")

st.markdown(
    """
    <style>
    .title { text-align:center; color:#2E86C1; font-size:2.2em; font-weight:bold; margin-bottom:10px; }
    .sub { text-align:center; color:#666; font-size:1.1em; margin-bottom:25px; }
    .result { background-color:#F0F3F4; padding:15px; border-radius:10px; font-size:1.1em; margin-top:10px; }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown('<div class="title">üí¨ ·ª®ng d·ª•ng ph√¢n t√≠ch c·∫£m x√∫c ƒëa ng√¥n ng·ªØ</div>', unsafe_allow_html=True)
st.markdown('<div class="sub">S·ª≠ d·ª•ng m√¥ h√¨nh <b>tabularisai/multilingual-sentiment-analysis</b></div>', unsafe_allow_html=True)

# ==============================
# ‚úèÔ∏è √î nh·∫≠p vƒÉn b·∫£n
# ==============================
user_input = st.text_area(
    "Nh·∫≠p c√¢u c·∫ßn ph√¢n t√≠ch (h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ):",
    "",
    height=120,
    placeholder="V√≠ d·ª•: T√¥i r·∫•t th√≠ch s·∫£n ph·∫©m n√†y ho·∫∑c I love this product!"
)

# ==============================
# üîç Ph√¢n t√≠ch khi ng∆∞·ªùi d√πng b·∫•m n√∫t
# ==============================
if st.button("üîç Ph√¢n t√≠ch c·∫£m x√∫c", use_container_width=True):
    text = user_input.strip()
    if not text:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n tr∆∞·ªõc khi ph√¢n t√≠ch.")
    else:
        # ==============================
        # üåç Ph√°t hi·ªán ng√¥n ng·ªØ v·ªõi langid
        # ==============================
        lang_code, confidence = langid.classify(text)

        lang_map = {
            "vi": "Ti·∫øng Vi·ªát",
            "en": "Ti·∫øng Anh",
            "fr": "Ti·∫øng Ph√°p",
            "de": "Ti·∫øng ƒê·ª©c",
            "es": "Ti·∫øng T√¢y Ban Nha",
            "zh": "Ti·∫øng Trung",
            "ja": "Ti·∫øng Nh·∫≠t",
            "ko": "Ti·∫øng H√†n",
            "id": "Ti·∫øng Indonesia",
            "th": "Ti·∫øng Th√°i"
        }
        lang_name = lang_map.get(lang_code, f"M√£ ng√¥n ng·ªØ: {lang_code}")
        st.info(f"üåê **Ng√¥n ng·ªØ ph√°t hi·ªán:** {lang_name} (ƒê·ªô tin c·∫≠y: {confidence:.2f})")

        # ==============================
        # üîÆ Ph√¢n t√≠ch c·∫£m x√∫c
        # ==============================
        inputs = tokenizer(
            text,
            return_tensors="pt",
            truncation=True,
            padding=True,
            max_length=512
        )
        with torch.no_grad():
            outputs = model(**inputs)
        logits = outputs.logits
        probs = F.softmax(logits, dim=-1)[0]

        # L·∫•y nh√£n d·ª± ƒëo√°n
        pred_id = torch.argmax(probs).item()
        pred_label = sentiment_map[pred_id]
        pred_score = probs[pred_id].item()

        # ==============================
        # üí° Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
        # ==============================
        st.markdown(f'<div class="result"><b>K·∫øt qu·∫£ d·ª± ƒëo√°n:</b> {pred_label}<br>'
                    f'<b>M·ª©c ƒë·ªô tin c·∫≠y:</b> {pred_score:.2%}</div>', unsafe_allow_html=True)

        st.progress(float(pred_score))

        # ==============================
        # üìä Bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán x√°c su·∫•t
        # ==============================
        df = pd.DataFrame({
            "C·∫£m x√∫c": [sentiment_map[i] for i in range(len(probs))],
            "X√°c su·∫•t": [float(p) for p in probs]
        })

        fig = px.pie(
            df,
            values="X√°c su·∫•t",
            names="C·∫£m x√∫c",
            color="C·∫£m x√∫c",
            color_discrete_sequence=px.colors.sequential.Blues_r,
            title="Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán m·ª©c ƒë·ªô tin c·∫≠y c·ªßa t·ª´ng nh√£n"
        )
        fig.update_traces(
            textinfo="label+percent",
            pull=[0.08 if i == pred_id else 0 for i in range(len(df))],
            textfont_size=14
        )
        fig.update_layout(title_x=0.5, height=450)
        st.plotly_chart(fig, use_container_width=True)
